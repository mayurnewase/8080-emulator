
MOV A A, 0x7f, 01111111, 1, 1, 5, Move data from r2 to r1, none
MOV B A, 0x47, 01000111, 1, 1, 5, Move data from r2 to r1, none
MOV C A, 0x4f, 01001111, 1, 1, 5, Move data from r2 to r1, none
MOV D A, 0x57, 01010111, 1, 1, 5, Move data from r2 to r1, none
MOV E A, 0x5f, 01011111, 1, 1, 5, Move data from r2 to r1, none
MOV H A, 0x67, 01100111, 1, 1, 5, Move data from r2 to r1, none
MOV L A, 0x6f, 01101111, 1, 1, 5, Move data from r2 to r1, none
MOV A B, 0x78, 01111000, 1, 1, 5, Move data from r2 to r1, none
MOV B B, 0x40, 01000000, 1, 1, 5, Move data from r2 to r1, none
MOV C B, 0x48, 01001000, 1, 1, 5, Move data from r2 to r1, none
MOV D B, 0x50, 01010000, 1, 1, 5, Move data from r2 to r1, none
MOV E B, 0x58, 01011000, 1, 1, 5, Move data from r2 to r1, none
MOV H B, 0x60, 01100000, 1, 1, 5, Move data from r2 to r1, none
MOV L B, 0x68, 01101000, 1, 1, 5, Move data from r2 to r1, none
MOV A C, 0x79, 01111001, 1, 1, 5, Move data from r2 to r1, none
MOV B C, 0x41, 01000001, 1, 1, 5, Move data from r2 to r1, none
MOV C C, 0x49, 01001001, 1, 1, 5, Move data from r2 to r1, none
MOV D C, 0x51, 01010001, 1, 1, 5, Move data from r2 to r1, none
MOV E C, 0x59, 01011001, 1, 1, 5, Move data from r2 to r1, none
MOV H C, 0x61, 01100001, 1, 1, 5, Move data from r2 to r1, none
MOV L C, 0x69, 01101001, 1, 1, 5, Move data from r2 to r1, none
MOV A D, 0x7a, 01111010, 1, 1, 5, Move data from r2 to r1, none
MOV B D, 0x42, 01000010, 1, 1, 5, Move data from r2 to r1, none
MOV C D, 0x4a, 01001010, 1, 1, 5, Move data from r2 to r1, none
MOV D D, 0x52, 01010010, 1, 1, 5, Move data from r2 to r1, none
MOV E D, 0x5a, 01011010, 1, 1, 5, Move data from r2 to r1, none
MOV H D, 0x62, 01100010, 1, 1, 5, Move data from r2 to r1, none
MOV L D, 0x6a, 01101010, 1, 1, 5, Move data from r2 to r1, none
MOV A E, 0x7b, 01111011, 1, 1, 5, Move data from r2 to r1, none
MOV B E, 0x43, 01000011, 1, 1, 5, Move data from r2 to r1, none
MOV C E, 0x4b, 01001011, 1, 1, 5, Move data from r2 to r1, none
MOV D E, 0x53, 01010011, 1, 1, 5, Move data from r2 to r1, none
MOV E E, 0x5b, 01011011, 1, 1, 5, Move data from r2 to r1, none
MOV H E, 0x63, 01100011, 1, 1, 5, Move data from r2 to r1, none
MOV L E, 0x6b, 01101011, 1, 1, 5, Move data from r2 to r1, none
MOV A H, 0x7c, 01111100, 1, 1, 5, Move data from r2 to r1, none
MOV B H, 0x44, 01000100, 1, 1, 5, Move data from r2 to r1, none
MOV C H, 0x4c, 01001100, 1, 1, 5, Move data from r2 to r1, none
MOV D H, 0x54, 01010100, 1, 1, 5, Move data from r2 to r1, none
MOV E H, 0x5c, 01011100, 1, 1, 5, Move data from r2 to r1, none
MOV H H, 0x64, 01100100, 1, 1, 5, Move data from r2 to r1, none
MOV L H, 0x6c, 01101100, 1, 1, 5, Move data from r2 to r1, none
MOV A L, 0x7d, 01111101, 1, 1, 5, Move data from r2 to r1, none
MOV B L, 0x45, 01000101, 1, 1, 5, Move data from r2 to r1, none
MOV C L, 0x4d, 01001101, 1, 1, 5, Move data from r2 to r1, none
MOV D L, 0x55, 01010101, 1, 1, 5, Move data from r2 to r1, none
MOV E L, 0x5d, 01011101, 1, 1, 5, Move data from r2 to r1, none
MOV H L, 0x65, 01100101, 1, 1, 5, Move data from r2 to r1, none
MOV L L, 0x6d, 01101101, 1, 1, 5, Move data from r2 to r1, none

MOV A M, 0x7e, 01111110, 1, 2, 7, Move data from memory location whose address is in H,L to register r, none
MOV B M, 0x46, 01000110, 1, 2, 7, Move data from memory location whose address is in H,L to register r, none
MOV C M, 0x4e, 01001110, 1, 2, 7, Move data from memory location whose address is in H,L to register r, none
MOV D M, 0x56, 01010110, 1, 2, 7, Move data from memory location whose address is in H,L to register r, none
MOV E M, 0x5e, 01011110, 1, 2, 7, Move data from memory location whose address is in H,L to register r, none
MOV H M, 0x66, 01100110, 1, 2, 7, Move data from memory location whose address is in H,L to register r, none
MOV L M, 0x6e, 01101110, 1, 2, 7, Move data from memory location whose address is in H,L to register r, none

MOV M A, 0x77, 01110111, 1, 2, 7, Move data from register r to memory location whose address is in registers H, L, none
MOV M B, 0x70, 01110000, 1, 2, 7, Move data from register r to memory location whose address is in registers H, L, none
MOV M C, 0x71, 01110001, 1, 2, 7, Move data from register r to memory location whose address is in registers H, L, none
MOV M D, 0x72, 01110010, 1, 2, 7, Move data from register r to memory location whose address is in registers H, L, none
MOV M E, 0x73, 01110011, 1, 2, 7, Move data from register r to memory location whose address is in registers H, L, none
MOV M H, 0x74, 01110100, 1, 2, 7, Move data from register r to memory location whose address is in registers H, L, none
MOV M L, 0x75, 01110101, 1, 2, 7, Move data from register r to memory location whose address is in registers H, L, none

MVI A, data, 0x3e, 00111110, 1, 2, 7, Content from byte 2 of instruction is moved to register r, none
MVI B, data, 0x6, 00000110, 1, 2, 7, Content from byte 2 of instruction is moved to register r, none
MVI C, data, 0xe, 00001110, 1, 2, 7, Content from byte 2 of instruction is moved to register r, none
MVI D, data, 0x16, 00010110, 1, 2, 7, Content from byte 2 of instruction is moved to register r, none
MVI E, data, 0x1e, 00011110, 1, 2, 7, Content from byte 2 of instruction is moved to register r, none
MVI H, data, 0x26, 00100110, 1, 2, 7, Content from byte 2 of instruction is moved to register r, none
MVI L, data, 0x2e, 00101110, 1, 2, 7, Content from byte 2 of instruction is moved to register r, none

MVI M, data, 0x36, 00110110, 3, 3, 10, Content from byte 2 of instruction is moved to memory location whose address is in register H,L, none

LXI BC, data 16, 0x1, 00000001, 3, 3, 10, byte 3 of instruction moved into high order register rh of pair rp, byte 2of instruction moved into low order register rl of pair rp, none
LXI DE, data 16, 0x11, 00010001, 3, 3, 10, byte 3 of instruction moved into high order register rh of pair rp, byte 2of instruction moved into low order register rl of pair rp, none
LXI HL, data 16, 0x21, 00100001, 3, 3, 10, byte 3 of instruction moved into high order register rh of pair rp, byte 2of instruction moved into low order register rl of pair rp, none
LXI SP, data 16, 0x31, 00110001, 3, 3, 10, byte 3 of instruction moved into high order register rh of pair rp, byte 2of instruction moved into low order register rl of pair rp, none

LDA addr, 0x3a, 00111010, 3, 4, 13, content of memory location whose address is in byte 3 and byte 2 of instruction is moved to register A, none

STA addr, 0x32, 00110010, 3, 4, 13, content of accumulator is moved to memory location whose address is in byte 3 and byte 2 of instruction, none

LHLD addr, 0x2a, 00101010, 3, 5, 16, content of memory location whose address is in byte 3 and byte 2 of instruction is moved to register Lcontent of memoey localtion at succeddging address is moved to register H, none

SHLD addr, 0x22, 00100010, 3, 5, 16, conent of register L moved to memory location whose address is in byte 3 and byte 2 of instructioncontent of register H moved to memory location at succeeding address, none

LDAX BC, 0xa, 00001010, 3, 2, 7, content of memory location whose address is in register pair rp is moved to register A, none
LDAX DE, 0x1a, 00011010, 3, 2, 7, content of memory location whose address is in register pair rp is moved to register A, none

STAX BC, 0x2, 00000010, 3, 2, 7, content of register A is moved to memory location whose address is in register pair rp, none
STAX DE, 0x12, 00010010, 3, 2, 7, content of register A is moved to memory location whose address is in register pair rp, none

XCHG, 0xeb, 11101011, 3, 1, 4, contents of register H and L are exchanged with contens of register D and E, none

ADD A, 0x87, 10000111, 1, 1, 4, A <- (A) + (r) content of register r is added to content of register A, Z,S,P,CY,AC
ADD B, 0x80, 10000000, 1, 1, 4, A <- (A) + (r) content of register r is added to content of register A, Z,S,P,CY,AC
ADD C, 0x81, 10000001, 1, 1, 4, A <- (A) + (r) content of register r is added to content of register A, Z,S,P,CY,AC
ADD D, 0x82, 10000010, 1, 1, 4, A <- (A) + (r) content of register r is added to content of register A, Z,S,P,CY,AC
ADD E, 0x83, 10000011, 1, 1, 4, A <- (A) + (r) content of register r is added to content of register A, Z,S,P,CY,AC
ADD H, 0x84, 10000100, 1, 1, 4, A <- (A) + (r) content of register r is added to content of register A, Z,S,P,CY,AC
ADD L, 0x85, 10000101, 1, 1, 4, A <- (A) + (r) content of register r is added to content of register A, Z,S,P,CY,AC

ADD M, 0x86, 10000110, 1, 2, 7, (A) <- (A) + ((H) (L)) content of memory location whose address is contained in H and L registers is added to the content of register Aresult is placed in register A, Z,S,P,CY,AC

ADI data, 0xc6, 11000110, 1, 2, 7, content of second byte of instruction is added to content of register Aresult is places in A, Z,S,P,CY,AC

ADC A, 0x8f, 10001111, 1, 1, 4, (A) <- (A) + (r) + (CY)  content of register r and content of carry buit are added to content of register Aresult is placed in register A, Z,S,P,CY,AC
ADC B, 0x88, 10001000, 1, 1, 4, (A) <- (A) + (r) + (CY)  content of register r and content of carry buit are added to content of register Aresult is placed in register A, Z,S,P,CY,AC
ADC C, 0x89, 10001001, 1, 1, 4, (A) <- (A) + (r) + (CY)  content of register r and content of carry buit are added to content of register Aresult is placed in register A, Z,S,P,CY,AC
ADC D, 0x8a, 10001010, 1, 1, 4, (A) <- (A) + (r) + (CY)  content of register r and content of carry buit are added to content of register Aresult is placed in register A, Z,S,P,CY,AC
ADC E, 0x8b, 10001011, 1, 1, 4, (A) <- (A) + (r) + (CY)  content of register r and content of carry buit are added to content of register Aresult is placed in register A, Z,S,P,CY,AC
ADC H, 0x8c, 10001100, 1, 1, 4, (A) <- (A) + (r) + (CY)  content of register r and content of carry buit are added to content of register Aresult is placed in register A, Z,S,P,CY,AC
ADC L, 0x8d, 10001101, 1, 1, 4, (A) <- (A) + (r) + (CY)  content of register r and content of carry buit are added to content of register Aresult is placed in register A, Z,S,P,CY,AC

ADC M, 0x8e, 10001110, 1, 2, 7, content  of memory location whose address is contained in H and L registers and content of carry bit are added to content of register Aresult is placed in register A, Z,S,P,CY,AC

ACI data, 0xce, 11001110, 1, 2, 7, (A) <- (A) + ((byte 2) + (CY)) , Z,S,P,CY,AC

SUB A, 0x97, 10010111, 1, 1, 4, (A) <- (A) - (r) content of register r is subtracted from content of register Aresult is placed in register A, Z,S,P,CY,AC
SUB B, 0x90, 10010000, 1, 1, 4, (A) <- (A) - (r) content of register r is subtracted from content of register Aresult is placed in register A, Z,S,P,CY,AC
SUB C, 0x91, 10010001, 1, 1, 4, (A) <- (A) - (r) content of register r is subtracted from content of register Aresult is placed in register A, Z,S,P,CY,AC
SUB D, 0x92, 10010010, 1, 1, 4, (A) <- (A) - (r) content of register r is subtracted from content of register Aresult is placed in register A, Z,S,P,CY,AC
SUB E, 0x93, 10010011, 1, 1, 4, (A) <- (A) - (r) content of register r is subtracted from content of register Aresult is placed in register A, Z,S,P,CY,AC
SUB H, 0x94, 10010100, 1, 1, 4, (A) <- (A) - (r) content of register r is subtracted from content of register Aresult is placed in register A, Z,S,P,CY,AC
SUB L, 0x95, 10010101, 1, 1, 4, (A) <- (A) - (r) content of register r is subtracted from content of register Aresult is placed in register A, Z,S,P,CY,AC

SUB M, 0x96, 10010110, 1, 2, 7, (A) <- (A) - ((H) (L)) content of memory location whose address is contained in H and L registers is subtracted from the content of register Aresult is placed in register A, Z,S,P,CY,AC

SUI data, 0xd6, 11010110, 1, 2, 7, (A) <- (A) - (byte 2) content of second byte of instruction is subtracted from content of register Aresult is placed in register A, Z,S,P,CY,AC

SBB A, 0x9f, 10011111, 1, 1, 4, (A) <- (A) - (r) - (CY) content of register r and content of carry bit are subtracted from content of register Aresult is placed in register A, Z,S,P,CY,AC
SBB B, 0x98, 10011000, 1, 1, 4, (A) <- (A) - (r) - (CY) content of register r and content of carry bit are subtracted from content of register Aresult is placed in register A, Z,S,P,CY,AC
SBB C, 0x99, 10011001, 1, 1, 4, (A) <- (A) - (r) - (CY) content of register r and content of carry bit are subtracted from content of register Aresult is placed in register A, Z,S,P,CY,AC
SBB D, 0x9a, 10011010, 1, 1, 4, (A) <- (A) - (r) - (CY) content of register r and content of carry bit are subtracted from content of register Aresult is placed in register A, Z,S,P,CY,AC
SBB E, 0x9b, 10011011, 1, 1, 4, (A) <- (A) - (r) - (CY) content of register r and content of carry bit are subtracted from content of register Aresult is placed in register A, Z,S,P,CY,AC
SBB H, 0x9c, 10011100, 1, 1, 4, (A) <- (A) - (r) - (CY) content of register r and content of carry bit are subtracted from content of register Aresult is placed in register A, Z,S,P,CY,AC
SBB L, 0x9d, 10011101, 1, 1, 4, (A) <- (A) - (r) - (CY) content of register r and content of carry bit are subtracted from content of register Aresult is placed in register A, Z,S,P,CY,AC

SBB M, 0x9e, 10011110, 1, 2, 7, (A) <- (A) - ((H) (L)) - (CY) content of memory location whose address is contained in H and L registers is subtracted from the content of register Aresult is placed in register A, Z,S,P,CY,AC

SBI data, 0xde, 11011110, 1, 2, 7, (A) <- (A) - ((byte 2) - (CY)) content of second byte and content of carry bit are both subtracted from register Aresult is placed in register A, Z,S,P,CY,AC

INR A, 0x3c, 00111100, 1, 1, 5, content of register r is incremented by 1, Z,S,P,AC
INR B, 0x4, 00000100, 1, 1, 5, content of register r is incremented by 1, Z,S,P,AC
INR C, 0xc, 00001100, 1, 1, 5, content of register r is incremented by 1, Z,S,P,AC
INR D, 0x14, 00010100, 1, 1, 5, content of register r is incremented by 1, Z,S,P,AC
INR E, 0x1c, 00011100, 1, 1, 5, content of register r is incremented by 1, Z,S,P,AC
INR H, 0x24, 00100100, 1, 1, 5, content of register r is incremented by 1, Z,S,P,AC
INR L, 0x2c, 00101100, 1, 1, 5, content of register r is incremented by 1, Z,S,P,AC

INR M, 0x34, 00110100, 1, 3, 10, ((H) (L)) <- ((H)(L)) + 1content of memory location whose addres is contained in H and L is incremented by 1, Z,S,P,AC

DCR A, 0x3d, 00111101, 1, 1, 5, (r) <- (r) - 1 content of register r is decremented by 1, Z,S,P,AC
DCR B, 0x5, 00000101, 1, 1, 5, (r) <- (r) - 1 content of register r is decremented by 1, Z,S,P,AC
DCR C, 0xd, 00001101, 1, 1, 5, (r) <- (r) - 1 content of register r is decremented by 1, Z,S,P,AC
DCR D, 0x15, 00010101, 1, 1, 5, (r) <- (r) - 1 content of register r is decremented by 1, Z,S,P,AC
DCR E, 0x1d, 00011101, 1, 1, 5, (r) <- (r) - 1 content of register r is decremented by 1, Z,S,P,AC
DCR H, 0x25, 00100101, 1, 1, 5, (r) <- (r) - 1 content of register r is decremented by 1, Z,S,P,AC
DCR L, 0x2d, 00101101, 1, 1, 5, (r) <- (r) - 1 content of register r is decremented by 1, Z,S,P,AC

DCR M, 0x35, 00110101, 1, 3, 10, ((H) (L)) <- ((H)(L)) - 1content of memory location whose addres is contained in H and L is decremented by 1, Z,S,P,AC

INX BC, 0x3, 00000011, 1, 1, 5, (rh) (rl) <- (rh) (rl) + 1content of register pair rp is incremented by 1, none
INX DE, 0x13, 00010011, 1, 1, 5, (rh) (rl) <- (rh) (rl) + 1content of register pair rp is incremented by 1, none
INX HL, 0x23, 00100011, 1, 1, 5, (rh) (rl) <- (rh) (rl) + 1content of register pair rp is incremented by 1, none
INX SP, 0x33, 00110011, 1, 1, 5, (rh) (rl) <- (rh) (rl) + 1content of register pair rp is incremented by 1, none

DCX BC, 0xb, 00001011, 1, 3, 10, (rh) (rl) <- (rh) (rl) - 1content of register pair rp is decremented by 1, Z,S,P,AC
DCX DE, 0x1b, 00011011, 1, 3, 10, (rh) (rl) <- (rh) (rl) - 1content of register pair rp is decremented by 1, Z,S,P,AC
DCX HL, 0x2b, 00101011, 1, 3, 10, (rh) (rl) <- (rh) (rl) - 1content of register pair rp is decremented by 1, Z,S,P,AC
DCX SP, 0x3b, 00111011, 1, 3, 10, (rh) (rl) <- (rh) (rl) - 1content of register pair rp is decremented by 1, Z,S,P,AC

DAD BC, 0x9, 00001001, 1, 3, 10, (H) (L) <- (H) (L) + (rh) (rl)content of register pair rp is added to content of register pair H andLresult is placed in register pair H and L. carry flag is set if there is carry out of double precision add, oterwise its reset, CY
DAD DE, 0x19, 00011001, 1, 3, 10, (H) (L) <- (H) (L) + (rh) (rl)content of register pair rp is added to content of register pair H andLresult is placed in register pair H and L. carry flag is set if there is carry out of double precision add, oterwise its reset, CY
DAD HL, 0x29, 00101001, 1, 3, 10, (H) (L) <- (H) (L) + (rh) (rl)content of register pair rp is added to content of register pair H andLresult is placed in register pair H and L. carry flag is set if there is carry out of double precision add, oterwise its reset, CY
DAD SP, 0x39, 00111001, 1, 3, 10, (H) (L) <- (H) (L) + (rh) (rl)content of register pair rp is added to content of register pair H andLresult is placed in register pair H and L. carry flag is set if there is carry out of double precision add, oterwise its reset, CY

DAA, 0x27, 00100111, 1, 1, 4, eight but number in register A is adjusted to form two 4 but binary coded decimal digits by following process1. if value of least significant 4 bits of register A is > thatn 9 or if AC flag is set, 6 is added to register A2. if value of most significant 4 buts of register A > 9or if CY flag is set, 6 is added to most significant 4 bits of register A, Z,S,P,AC

ANA A, 0xa7, 10100111, 1, 1, 4, (A) <- (A) & (r) content of register r is logically ANDed with content of register Aresult is placed in register A and CY flag is cleared, Z,S,P,AC
ANA B, 0xa0, 10100000, 1, 1, 4, (A) <- (A) & (r) content of register r is logically ANDed with content of register Aresult is placed in register A and CY flag is cleared, Z,S,P,AC
ANA C, 0xa1, 10100001, 1, 1, 4, (A) <- (A) & (r) content of register r is logically ANDed with content of register Aresult is placed in register A and CY flag is cleared, Z,S,P,AC
ANA D, 0xa2, 10100010, 1, 1, 4, (A) <- (A) & (r) content of register r is logically ANDed with content of register Aresult is placed in register A and CY flag is cleared, Z,S,P,AC
ANA E, 0xa3, 10100011, 1, 1, 4, (A) <- (A) & (r) content of register r is logically ANDed with content of register Aresult is placed in register A and CY flag is cleared, Z,S,P,AC
ANA H, 0xa4, 10100100, 1, 1, 4, (A) <- (A) & (r) content of register r is logically ANDed with content of register Aresult is placed in register A and CY flag is cleared, Z,S,P,AC
ANA L, 0xa5, 10100101, 1, 1, 4, (A) <- (A) & (r) content of register r is logically ANDed with content of register Aresult is placed in register A and CY flag is cleared, Z,S,P,AC

ANA M, 0xa6, 10100110, 1, 2, 7, (A) <- (A) & ((H) (L)) content of memory location whose address is contained in H and L registers is logically ANDed with content of register Aresult is placed in register A and CY flag is cleared, Z,S,P,AC

ANI data, 0xe6, 11100110, 1, 2, 7, (A) <- (A) & (byte 2) content of second byte of instruction is logically ANDed with content of register Aresult is placed in register A and CY flag is cleared, Z,S,P,AC

XRA A, 0xaf, 10101111, 1, 1, 4, (A) <- (A) XOR (r) content of register r is logically XORed with content of register Aresult is placed in register A and CY and AC flag is cleared, Z,S,P,AC
XRA B, 0xa8, 10101000, 1, 1, 4, (A) <- (A) XOR (r) content of register r is logically XORed with content of register Aresult is placed in register A and CY and AC flag is cleared, Z,S,P,AC
XRA C, 0xa9, 10101001, 1, 1, 4, (A) <- (A) XOR (r) content of register r is logically XORed with content of register Aresult is placed in register A and CY and AC flag is cleared, Z,S,P,AC
XRA D, 0xaa, 10101010, 1, 1, 4, (A) <- (A) XOR (r) content of register r is logically XORed with content of register Aresult is placed in register A and CY and AC flag is cleared, Z,S,P,AC
XRA E, 0xab, 10101011, 1, 1, 4, (A) <- (A) XOR (r) content of register r is logically XORed with content of register Aresult is placed in register A and CY and AC flag is cleared, Z,S,P,AC
XRA H, 0xac, 10101100, 1, 1, 4, (A) <- (A) XOR (r) content of register r is logically XORed with content of register Aresult is placed in register A and CY and AC flag is cleared, Z,S,P,AC
XRA L, 0xad, 10101101, 1, 1, 4, (A) <- (A) XOR (r) content of register r is logically XORed with content of register Aresult is placed in register A and CY and AC flag is cleared, Z,S,P,AC

XRA M, 0xae, 10101110, 1, 2, 7, (A) <- (A) XOR ((H) (L)) content of memory location whose address is contained in H and L registers is logically XORed with content of register Aresult is placed in register A and CY and AC flag is cleared, Z,S,P,AC

XRI data, 0xee, 11101110, 1, 2, 7, (A) <- (A) exclusive-or (byte2)content of second byte of instructoion is exclude-ORd with content of register Aresult is placed on resgiter A, CY and AC flags are cleared, Z,S,P,AC

ORA A, 0xb7, 10110111, 1, 1, 4, (A) <- (A) inclusive-ord (r)content of register r is includesive ored with content of regsiter Aresult is placed in register A, CY and AC flags are cleared, Z,S,P,CY,AC
ORA B, 0xb0, 10110000, 1, 1, 4, (A) <- (A) inclusive-ord (r)content of register r is includesive ored with content of regsiter Aresult is placed in register A, CY and AC flags are cleared, Z,S,P,CY,AC
ORA C, 0xb1, 10110001, 1, 1, 4, (A) <- (A) inclusive-ord (r)content of register r is includesive ored with content of regsiter Aresult is placed in register A, CY and AC flags are cleared, Z,S,P,CY,AC
ORA D, 0xb2, 10110010, 1, 1, 4, (A) <- (A) inclusive-ord (r)content of register r is includesive ored with content of regsiter Aresult is placed in register A, CY and AC flags are cleared, Z,S,P,CY,AC
ORA E, 0xb3, 10110011, 1, 1, 4, (A) <- (A) inclusive-ord (r)content of register r is includesive ored with content of regsiter Aresult is placed in register A, CY and AC flags are cleared, Z,S,P,CY,AC
ORA H, 0xb4, 10110100, 1, 1, 4, (A) <- (A) inclusive-ord (r)content of register r is includesive ored with content of regsiter Aresult is placed in register A, CY and AC flags are cleared, Z,S,P,CY,AC
ORA L, 0xb5, 10110101, 1, 1, 4, (A) <- (A) inclusive-ord (r)content of register r is includesive ored with content of regsiter Aresult is placed in register A, CY and AC flags are cleared, Z,S,P,CY,AC

ORA M, 0xb6, 10110110, 1, 2, 7, (A) <- (A) inclusive-ord ((H) (L))content of memory location whose address is contained in H and L registers is inclusive ored with content of register Aresult is placed in register A, CY and AC flags are cleared, Z,S,P,AC,CY

ORI data, 0xf6, 11110110, 1, 2, 7, (A) <- (A) inclusive ored(byte2) content of second byte of instruction is inclusive ored with content of register Aresult is placed in register A, CY and AC flags are cleared, Z,S,P,AC,CY

CMP A, 0xbf, 10111111, 1, 1, 4, (A) - (r) content of register r is subtracted from content of register Aresult is not stored, only flags are affected like belowZ flag is set to 1 if (A) = (r), CY flag is set to 1 if (A) < (r), Z,S,P,AC,CY
CMP B, 0xb8, 10111000, 1, 1, 4, (A) - (r) content of register r is subtracted from content of register Aresult is not stored, only flags are affected like belowZ flag is set to 1 if (A) = (r), CY flag is set to 1 if (A) < (r), Z,S,P,AC,CY
CMP C, 0xb9, 10111001, 1, 1, 4, (A) - (r) content of register r is subtracted from content of register Aresult is not stored, only flags are affected like belowZ flag is set to 1 if (A) = (r), CY flag is set to 1 if (A) < (r), Z,S,P,AC,CY
CMP D, 0xba, 10111010, 1, 1, 4, (A) - (r) content of register r is subtracted from content of register Aresult is not stored, only flags are affected like belowZ flag is set to 1 if (A) = (r), CY flag is set to 1 if (A) < (r), Z,S,P,AC,CY
CMP E, 0xbb, 10111011, 1, 1, 4, (A) - (r) content of register r is subtracted from content of register Aresult is not stored, only flags are affected like belowZ flag is set to 1 if (A) = (r), CY flag is set to 1 if (A) < (r), Z,S,P,AC,CY
CMP H, 0xbc, 10111100, 1, 1, 4, (A) - (r) content of register r is subtracted from content of register Aresult is not stored, only flags are affected like belowZ flag is set to 1 if (A) = (r), CY flag is set to 1 if (A) < (r), Z,S,P,AC,CY
CMP L, 0xbd, 10111101, 1, 1, 4, (A) - (r) content of register r is subtracted from content of register Aresult is not stored, only flags are affected like belowZ flag is set to 1 if (A) = (r), CY flag is set to 1 if (A) < (r), Z,S,P,AC,CY

CMP M, 0xbe, 10111110, 1, 2, 7, (A) - ((H)(L)) content of memory location whose address is contained in H and L registers is subtracted from content of register Aresult is not stored, only flags are affected like belowZ flag is set to 1 if (A) = ((H)(L)), CY flag is set to 1 if (A) < ((H)(L)), Z,S,P,AC,CY

CPI data, 0xfe, 11111110, 1, 2, 7, (A) - (byte 2) content of second byte of instruction is subtracted from content of register Acondition flags are set, Z,S,P,AC,CY

RLC, 0x7, 00000111, 1, 1, 4, rotate left(An+1) <- (An) ; (A0) <- (A7)(CY) <- (A7)contents of register A are rotated left one bit positionlower order bit and CY flag are both set to value shifted out of high order bit position, CY

RRC, 0xf, 00001111, 1, 1, 4, rotate right(An) <- (AA-1) ; (A7) <- (A0)(CY) <- (A0)contents of register A are rotated right one bit positionhigh order bit and CY flag are both set to value shifted out of low order bit position, CY

RAL, 0x17, 00010111, 1, 1, 4, (An+1) <- (An); (A0) <- (CY)(CY) <- (A7)rotate left through carrycontents of register A are rotated left one bit positionthrough carry flaglower bit is set equal to CY flag and CY flag is set to value shifted out of high order bit, CY

RAR, 0x1f, 00011111, 1, 1, 4, rotate right through carry(An) <- (An+1); (CY) <- (A0)(A7) <- (CY), CY

CMA, 0x2f, 00101111, 1, 1, 4, (A) <- (A) complementcontents of register A are complemented0 bits become 1, 1 become 0, none

CMC, 0x3f, 00111111, 1, 1, 4, complement carry(CY) <- (CY) complementCY flag is complemented, CY

STC, 0x37, 00110111, 1, 1, 4, (CY) <- 1CY flag is set to 1, CY

JMP addr, 0xc3, 11000011, 1, 3, 10, (PC) <- (byte 3)(byte 2)program control is transferred to the memory location whose address is specified in the instruction, none

Jcondition addr, 0xc2, 11000010, 1, 3, 10, if (CCC) then (PC) <- (byte 3)(byte 2)program control is transferred to the memory location whose address is specified in the byte 3 and 2 of this instructionif condition is satisfied else control continues normally, none
Jcondition addr, 0xca, 11001010, 1, 3, 10, if (CCC) then (PC) <- (byte 3)(byte 2)program control is transferred to the memory location whose address is specified in the byte 3 and 2 of this instructionif condition is satisfied else control continues normally, none
Jcondition addr, 0xd2, 11010010, 1, 3, 10, if (CCC) then (PC) <- (byte 3)(byte 2)program control is transferred to the memory location whose address is specified in the byte 3 and 2 of this instructionif condition is satisfied else control continues normally, none
Jcondition addr, 0xda, 11011010, 1, 3, 10, if (CCC) then (PC) <- (byte 3)(byte 2)program control is transferred to the memory location whose address is specified in the byte 3 and 2 of this instructionif condition is satisfied else control continues normally, none
Jcondition addr, 0xe2, 11100010, 1, 3, 10, if (CCC) then (PC) <- (byte 3)(byte 2)program control is transferred to the memory location whose address is specified in the byte 3 and 2 of this instructionif condition is satisfied else control continues normally, none
Jcondition addr, 0xea, 11101010, 1, 3, 10, if (CCC) then (PC) <- (byte 3)(byte 2)program control is transferred to the memory location whose address is specified in the byte 3 and 2 of this instructionif condition is satisfied else control continues normally, none
Jcondition addr, 0xf2, 11110010, 1, 3, 10, if (CCC) then (PC) <- (byte 3)(byte 2)program control is transferred to the memory location whose address is specified in the byte 3 and 2 of this instructionif condition is satisfied else control continues normally, none
Jcondition addr, 0xfa, 11111010, 1, 3, 10, if (CCC) then (PC) <- (byte 3)(byte 2)program control is transferred to the memory location whose address is specified in the byte 3 and 2 of this instructionif condition is satisfied else control continues normally, none

CALL addr, 0xcd, 11001101, 3, 5, 17, ((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- (byte 3) (byte 2)higher order eight bits of next instruciton address are moved to memoery location whose address is one less than content of register SP.low order eight bits of next instruction address are moved to memory location whose address is 2 less than content of register SP.content of register SP is decrement ed by 2.control is transferred to instruction whose address is specified in byte 3 and bute 2 of current instruction, none

Ccondition addr, 0xc4, 11000100, 3, 0, 0, if (CCC)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- (byte 3) (byte 2)if specified condition is true then actions specified in call instruction are performed, none
Ccondition addr, 0xcc, 11001100, 3, 0, 0, if (CCC)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- (byte 3) (byte 2)if specified condition is true then actions specified in call instruction are performed, none
Ccondition addr, 0xd4, 11010100, 3, 0, 0, if (CCC)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- (byte 3) (byte 2)if specified condition is true then actions specified in call instruction are performed, none
Ccondition addr, 0xdc, 11011100, 3, 0, 0, if (CCC)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- (byte 3) (byte 2)if specified condition is true then actions specified in call instruction are performed, none
Ccondition addr, 0xe4, 11100100, 3, 0, 0, if (CCC)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- (byte 3) (byte 2)if specified condition is true then actions specified in call instruction are performed, none
Ccondition addr, 0xec, 11101100, 3, 0, 0, if (CCC)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- (byte 3) (byte 2)if specified condition is true then actions specified in call instruction are performed, none
Ccondition addr, 0xf4, 11110100, 3, 0, 0, if (CCC)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- (byte 3) (byte 2)if specified condition is true then actions specified in call instruction are performed, none
Ccondition addr, 0xfc, 11111100, 3, 0, 0, if (CCC)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- (byte 3) (byte 2)if specified condition is true then actions specified in call instruction are performed, none

RET, 0xc9, 11001001, 1, 3, 10, (PCL) <- ((SP))(PCH) <- ((SP) + 1)(SP) <- (SP) + 2content of memory location whose address is specificed in register SP is moved to low order 8 bits of register PCcontent of memory location whose address is 1 more than content of register SP is moved to high order 8 bits of register PC.content of register SP is incremented by 2, none

Rcondition, 0xc0, 11000000, 1, 0, 0, conditional returnif (CCC)(PCL) <- ((SP))(PCH) <- ((SP) + 1)(SP) <- (SP) + 2if specified condition is true then actions specified in return instruction are performed, nonw
Rcondition, 0xc8, 11001000, 1, 0, 0, conditional returnif (CCC)(PCL) <- ((SP))(PCH) <- ((SP) + 1)(SP) <- (SP) + 2if specified condition is true then actions specified in return instruction are performed, nonw
Rcondition, 0xd0, 11010000, 1, 0, 0, conditional returnif (CCC)(PCL) <- ((SP))(PCH) <- ((SP) + 1)(SP) <- (SP) + 2if specified condition is true then actions specified in return instruction are performed, nonw
Rcondition, 0xd8, 11011000, 1, 0, 0, conditional returnif (CCC)(PCL) <- ((SP))(PCH) <- ((SP) + 1)(SP) <- (SP) + 2if specified condition is true then actions specified in return instruction are performed, nonw
Rcondition, 0xe0, 11100000, 1, 0, 0, conditional returnif (CCC)(PCL) <- ((SP))(PCH) <- ((SP) + 1)(SP) <- (SP) + 2if specified condition is true then actions specified in return instruction are performed, nonw
Rcondition, 0xe8, 11101000, 1, 0, 0, conditional returnif (CCC)(PCL) <- ((SP))(PCH) <- ((SP) + 1)(SP) <- (SP) + 2if specified condition is true then actions specified in return instruction are performed, nonw
Rcondition, 0xf0, 11110000, 1, 0, 0, conditional returnif (CCC)(PCL) <- ((SP))(PCH) <- ((SP) + 1)(SP) <- (SP) + 2if specified condition is true then actions specified in return instruction are performed, nonw
Rcondition, 0xf8, 11111000, 1, 0, 0, conditional returnif (CCC)(PCL) <- ((SP))(PCH) <- ((SP) + 1)(SP) <- (SP) + 2if specified condition is true then actions specified in return instruction are performed, nonw

RST n, 0xc7, 11000111, 1, 3, 11, restart (figure out NNN in opcode later)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- 8 * (NNN), none
RST n, 0xcf, 11001111, 1, 3, 11, restart (figure out NNN in opcode later)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- 8 * (NNN), none
RST n, 0xd7, 11010111, 1, 3, 11, restart (figure out NNN in opcode later)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- 8 * (NNN), none
RST n, 0xdf, 11011111, 1, 3, 11, restart (figure out NNN in opcode later)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- 8 * (NNN), none
RST n, 0xe7, 11100111, 1, 3, 11, restart (figure out NNN in opcode later)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- 8 * (NNN), none
RST n, 0xef, 11101111, 1, 3, 11, restart (figure out NNN in opcode later)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- 8 * (NNN), none
RST n, 0xf7, 11110111, 1, 3, 11, restart (figure out NNN in opcode later)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- 8 * (NNN), none
RST n, 0xff, 11111111, 1, 3, 11, restart (figure out NNN in opcode later)((SP) - 1) <- (PCH)((SP) - 2) <- (PCL)(SP) <- (SP) - 2(PC) <- 8 * (NNN), none

PCHL, 0xe9, 11101001, 1, 1, 5, jump H and L indirect -> move H and L to PC(PCH) <- (H)(PCL) <- (L), none

PUSH BC, 0xc5, 11000101, 1, 3, 11, ((SP) - 1) <- (rh)((SP) - 2) <- (rl)(SP) <- (SP) - 2content of high order register pair rp is moved to memory location whose address is one less than content of register SPcontent of low order register pair rp is moved to memory location whose address is 2 less than content of register SPcontent of register SP is decremented by 2register pair RP is now allowed, none
PUSH DE, 0xd5, 11010101, 1, 3, 11, ((SP) - 1) <- (rh)((SP) - 2) <- (rl)(SP) <- (SP) - 2content of high order register pair rp is moved to memory location whose address is one less than content of register SPcontent of low order register pair rp is moved to memory location whose address is 2 less than content of register SPcontent of register SP is decremented by 2register pair RP is now allowed, none
PUSH HL, 0xe5, 11100101, 1, 3, 11, ((SP) - 1) <- (rh)((SP) - 2) <- (rl)(SP) <- (SP) - 2content of high order register pair rp is moved to memory location whose address is one less than content of register SPcontent of low order register pair rp is moved to memory location whose address is 2 less than content of register SPcontent of register SP is decremented by 2register pair RP is now allowed, none

PUSH PSW, 0xf5, 11110101, 1, 3, 11, push processor status word((SP) - 1) <- (A)((SP) - 2)0 <- (CY), ((SP) - 2)1 <- 1((SP) - 2)2 <- (P), ((SP) - 2)3 <- 0((SP) - 2)4 <- (AC), ((SP) - 2)5 <- 0((SP) - 2)6 <- (Z), ((SP) - 2)7 <- (S)(SP) <- (SP) - 2, none

POP BC, 0xc1, 11000001, 1, 3, 10, (rl) <- ((SP))(rh) <- ((SP) + 1)(SP) <- (SP) + 2content of memory location whose address is specified by content of regsiter SP is moved to low order regsister of register pir rp.content  of memory location whose address is 1 more than  content of register pair SP is moved to high order regisster of register pair rp.content of register SP is incremented by 2. rp = SP is not allowed, none
POP DE, 0xd1, 11010001, 1, 3, 10, (rl) <- ((SP))(rh) <- ((SP) + 1)(SP) <- (SP) + 2content of memory location whose address is specified by content of regsiter SP is moved to low order regsister of register pir rp.content  of memory location whose address is 1 more than  content of register pair SP is moved to high order regisster of register pair rp.content of register SP is incremented by 2. rp = SP is not allowed, none
POP HL, 0xe1, 11100001, 1, 3, 10, (rl) <- ((SP))(rh) <- ((SP) + 1)(SP) <- (SP) + 2content of memory location whose address is specified by content of regsiter SP is moved to low order regsister of register pir rp.content  of memory location whose address is 1 more than  content of register pair SP is moved to high order regisster of register pair rp.content of register SP is incremented by 2. rp = SP is not allowed, none

POP PSW, 0xf1, 11110001, 1, 3, 10, pop processor status word(CY) <- ((SP))0(P) <- ((SP))2(AC) <- ((SP))4(Z) <- ((SP))6(S) <- ((SP))7(S) <- ((SP) + 1)(SP) <- (SP) + 2content of memory location whose address is specified by content of register SP is used to restore condition flags.content of memory location whose address is 1 more than content of regsiter SP is moved to register Acontent of register SP is incremented by 2, Z,S,P,CY,AC

XTHL, 0xe3, 11100011, 1, 5, 18, exchange stack top with H and L(L) <-> ((SP))(H) <-> ((SP) + 1)content of register L is exchanged with content of memory location whose address is specified by content of register SPcontent of register H is exchanged with content of memory location whose address is 1 more than content of register SP, none

SPHL, 0xf9, 11111001, 1, 1, 5, move HL to SP(SP) <- (H) (L)content of register pair HL is moved to register SP, none

IN port, 0xdb, 11011011, 2, 3, 10, (A) <- dataThe data placed on data bys by specified port (byte 2) is moved to register A, none

OUT port, 0xd3, 11010011, 1, 3, 10, (data) <- (A)content of regsiter A is placed on 8 bit data bus for transmission to specified port, none

EI, 0xfb, 11111011, 1, 1, 4, enable interrupts -> interrupt system is enabled following the execution of next instruction, none

DI, 0xf3, 11110011, 1, 1, 4, disable interrupts -> interrupt system is disabled following the execution of next instruction, none

HLT, 0x76, 01110110, 1, 1, 7, prcessor is stopped, registers and flags are unaffected, none

no op, 0x0, 00000000, 1, 1, 4, no operation is performed, regsiters and flags are unaffected, none
